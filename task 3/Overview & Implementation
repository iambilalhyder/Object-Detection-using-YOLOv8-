Task 3 - Overview-
YOLOv8n Training on African Wildlife Dataset 
I successfully completed Task 3 by training the YOLOv8n object detection model on the African Wildlife dataset.
The goal was to train a lightweight model capable of detecting four animal classes: elephant, zebra, giraffe, and lion.
Implementation- 
The training was performed locally on my Linux virtual machine (VM).
Initially, I faced memory issues that caused the training process to fail. This was resolved by increasing the VM’s memory allocation and adjusting the batch size to fit within the available resources.
The model was trained for 20 epochs with an image size of 640 × 640, using the YOLOv8n architecture, which is optimized for performance on low-resource systems.
I created a custom data.yaml file to correctly define the dataset paths and class labels.
The training completed successfully, and the model weights (best.pt and last.pt) were saved in the runs/detect/ directory.
After training, I analyzed the model’s performance using several evaluation metrics.
The confusion matrix showed strong diagonal dominance, indicating most predictions matched the actual classes.
The F1 score reached its peak at a confidence threshold of 0.575, representing a good balance between precision and recall.
Precision was high at higher confidence thresholds, meaning the model made very few false positives.
Recall decreased slightly at higher thresholds, which is expected in most detection models.
The precision-recall curve showed a high area under the curve, suggesting excellent mean Average Precision (mAP).
Training and validation loss curves were smooth and converged properly, with no signs of overfitting.
The model performed reliably on the given dataset and is now suitable for use in wildlife detection applications.
